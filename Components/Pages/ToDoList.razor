@page "/todo"
@using System.Collections.Generic
@using Assignment2.Data

<h1>To-Do List</h1>

<h2>To Do</h2>
<input type="text" @bind="newToDoItem" placeholder="Enter a new ToDo to your list." />
<button class="btn-primary rounded" @onclick="AddToDoItem">Add</button>
<ul>
    @foreach (var item in toDoItems)
    {
        <li>
            <input type="checkbox" @onchange="@(() => MarkAsCompleted(item))" />
            <span>@item.Title</span>
            <button class="btn-danger rounded" @onclick="@(() => DeleteToDoItem(item))">Delete</button>
        </li>
    }
</ul>

<h2>Done</h2>
<ul>
    @foreach (var item in completedItems)
    {
        <li>
            <span>@item.Title</span>
            <button class="btn-danger rounded" @onclick="@(() => DeleteToDoItem(item))">Delete</button>
        </li>
    }
</ul>

@code {
    //Private variables to hold user input and instantiate todoitems
    private string newToDoItem = "";
    private List<ToDoItem> toDoItems = new List<ToDoItem>();
    private List<ToDoItem> completedItems = new List<ToDoItem>();

    //Adds to do items 
    private void AddToDoItem()
    {
        if (!string.IsNullOrWhiteSpace(newToDoItem))
        {
            
            try
            {
                if (!IsValidInput(newToDoItem))
                {
                    //Throws invalid input exception error
                    throw new InvalidInputException();
                }
            }//Handles invalid exception
            catch (InvalidInputException ex)
            {
                //Displays an error message
                App.Current.MainPage.DisplayAlert("Error", ex.Message, "Ok");
                return;
            }
            toDoItems.Add(new ToDoItem(newToDoItem));
            newToDoItem = string.Empty;
        }
    }
    //Checks user input for special characters
    private bool IsValidInput(string input)
    {
        //If input contains any of the special characters defined
        return !input.Contains("@") && !input.Contains("#") && !input.Contains("%") && !input.Contains("$");
    }
    //Marks items as completed
    private void MarkAsCompleted(ToDoItem item)
    {
        item.IsCompleted = true;
        completedItems.Add(item);
        toDoItems.Remove(item);
    }
    //Removes items from todolist
    private void DeleteToDoItem(ToDoItem item)
    {
        toDoItems.RemoveAll(x => x.Id == item.Id);
        completedItems.RemoveAll(x => x.Id == item.Id);
    }
}
